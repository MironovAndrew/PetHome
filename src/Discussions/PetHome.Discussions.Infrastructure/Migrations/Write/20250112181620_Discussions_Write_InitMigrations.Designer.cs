// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PetHome.Discussions.Infrastructure.Database;

#nullable disable

namespace PetHome.Discussions.Infrastructure.Migrations.Write
{
    [DbContext(typeof(DiscussionDbContext))]
    [Migration("20250112181620_Discussions_Write_InitMigrations")]
    partial class Discussions_Write_InitMigrations
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("Discussions")
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DiscussionUser", b =>
                {
                    b.Property<Guid>("DiscussionId")
                        .HasColumnType("uuid")
                        .HasColumnName("discussion_id");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uuid")
                        .HasColumnName("users_id");

                    b.HasKey("DiscussionId", "UsersId")
                        .HasName("pk_discussion_user");

                    b.HasIndex("UsersId")
                        .HasDatabaseName("ix_discussion_user_users_id");

                    b.ToTable("discussion_user", "Discussions");
                });

            modelBuilder.Entity("PermissionRole", b =>
                {
                    b.Property<Guid>("PermissionsId")
                        .HasColumnType("uuid")
                        .HasColumnName("permissions_id");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("role_id");

                    b.HasKey("PermissionsId", "RoleId")
                        .HasName("pk_permission_role");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_permission_role_role_id");

                    b.ToTable("permission_role", "Discussions");
                });

            modelBuilder.Entity("PetHome.Accounts.Domain.Accounts.AdminAccount", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<DateTime>("DeletionDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("soft_deleted_date");

                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.HasKey("UserId")
                        .HasName("pk_admin_accounts");

                    b.ToTable("admin_accounts", "Discussions");
                });

            modelBuilder.Entity("PetHome.Accounts.Domain.Accounts.ParticipantAccount", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<DateTime>("DeletionDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("soft_deleted_date");

                    b.Property<string>("FavoritePets")
                        .HasColumnType("text")
                        .HasColumnName("favorite_pets");

                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.HasKey("UserId")
                        .HasName("pk_participant_accounts");

                    b.ToTable("participant_accounts", "Discussions");
                });

            modelBuilder.Entity("PetHome.Accounts.Domain.Accounts.VolunteerAccount", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<string>("Certificates")
                        .HasColumnType("text")
                        .HasColumnName("certificates");

                    b.Property<DateTime>("DeletionDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("soft_deleted_date");

                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Pets")
                        .HasColumnType("text")
                        .HasColumnName("pets");

                    b.Property<string>("Requisites")
                        .HasColumnType("text")
                        .HasColumnName("requisites");

                    b.Property<DateTime>("StartVolunteeringDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_volunteering_date");

                    b.HasKey("UserId")
                        .HasName("ak_volunteer_account_user_id");

                    b.ToTable("volunteer_accounts", "Discussions");
                });

            modelBuilder.Entity("PetHome.Accounts.Domain.Aggregates.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("text")
                        .HasColumnName("normalized_name");

                    b.HasKey("Id")
                        .HasName("pk_roles");

                    b.ToTable("roles", "Discussions");
                });

            modelBuilder.Entity("PetHome.Accounts.Domain.Aggregates.RolePermission", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("role_id");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uuid")
                        .HasColumnName("permission_id");

                    b.HasKey("RoleId", "PermissionId")
                        .HasName("pk_role_permission");

                    b.ToTable("role_permission", "Discussions");
                });

            modelBuilder.Entity("PetHome.Accounts.Domain.Aggregates.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer")
                        .HasColumnName("access_failed_count");

                    b.Property<Guid?>("AdminUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("admin_user_id");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("birth_date");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<DateTime>("DeletionDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deletion_date");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("email_confirmed");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lockout_end");

                    b.Property<string>("Medias")
                        .HasColumnType("text")
                        .HasColumnName("medias");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("text")
                        .HasColumnName("normalized_email");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("text")
                        .HasColumnName("normalized_user_name");

                    b.Property<Guid?>("ParticipantUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("participant_user_id");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<string>("PhoneNumbers")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("role_id");

                    b.Property<Guid?>("RoleId1")
                        .HasColumnType("uuid")
                        .HasColumnName("role_id1");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text")
                        .HasColumnName("security_stamp");

                    b.Property<string>("SocialNetworks")
                        .HasColumnType("text")
                        .HasColumnName("social_networks");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("two_factor_enabled");

                    b.Property<string>("UserName")
                        .HasColumnType("text")
                        .HasColumnName("user_name");

                    b.Property<Guid?>("VolunteerUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("volunteer_user_id");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("AdminUserId")
                        .IsUnique()
                        .HasDatabaseName("ix_users_admin_user_id");

                    b.HasIndex("ParticipantUserId")
                        .IsUnique()
                        .HasDatabaseName("ix_users_participant_user_id");

                    b.HasIndex("RoleId1")
                        .HasDatabaseName("ix_users_role_id1");

                    b.HasIndex("VolunteerUserId")
                        .IsUnique()
                        .HasDatabaseName("ix_users_volunteer_user_id");

                    b.ToTable("users", "Discussions", t =>
                        {
                            t.Property("PhoneNumber")
                                .HasColumnName("phone_number1");
                        });
                });

            modelBuilder.Entity("PetHome.Accounts.Domain.Tokens.RefreshToken.RefreshSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("ExpiredIn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expired_in");

                    b.Property<Guid>("JTI")
                        .HasColumnType("uuid")
                        .HasColumnName("jti");

                    b.Property<Guid>("RefreshToken")
                        .HasColumnType("uuid")
                        .HasColumnName("refresh_token");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_refresh_sessions");

                    b.ToTable("refresh_sessions", "Discussions");
                });

            modelBuilder.Entity("PetHome.Core.ValueObjects.RolePermission.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.HasKey("Id")
                        .HasName("pk_permissions");

                    b.ToTable("permissions", "Discussions");
                });

            modelBuilder.Entity("PetHome.Discussions.Domain.Discussion", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("RelationId")
                        .HasColumnType("uuid")
                        .HasColumnName("relation_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("pk_discussions");

                    b.HasIndex("RelationId")
                        .HasDatabaseName("ix_discussions_relation_id");

                    b.ToTable("discussions", "Discussions");
                });

            modelBuilder.Entity("PetHome.Discussions.Domain.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("DiscussionId")
                        .HasColumnType("uuid")
                        .HasColumnName("discussion_id");

                    b.Property<bool>("IsEdited")
                        .HasColumnType("boolean")
                        .HasColumnName("is_edited");

                    b.Property<string>("Text")
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid>("UserId1")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id1");

                    b.HasKey("Id")
                        .HasName("pk_messages");

                    b.HasIndex("DiscussionId")
                        .HasDatabaseName("ix_messages_discussion_id");

                    b.HasIndex("UserId1")
                        .HasDatabaseName("ix_messages_user_id1");

                    b.ToTable("messages", "Discussions");
                });

            modelBuilder.Entity("PetHome.Discussions.Domain.Relation", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_relations");

                    b.ToTable("relations", "Discussions");
                });

            modelBuilder.Entity("DiscussionUser", b =>
                {
                    b.HasOne("PetHome.Discussions.Domain.Discussion", null)
                        .WithMany()
                        .HasForeignKey("DiscussionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_discussion_user_discussions_discussion_id");

                    b.HasOne("PetHome.Accounts.Domain.Aggregates.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_discussion_user_user_users_id");
                });

            modelBuilder.Entity("PermissionRole", b =>
                {
                    b.HasOne("PetHome.Core.ValueObjects.RolePermission.Permission", null)
                        .WithMany()
                        .HasForeignKey("PermissionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_permission_role_permissions_permissions_id");

                    b.HasOne("PetHome.Accounts.Domain.Aggregates.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_permission_role_roles_role_id");
                });

            modelBuilder.Entity("PetHome.Accounts.Domain.Aggregates.User", b =>
                {
                    b.HasOne("PetHome.Accounts.Domain.Accounts.AdminAccount", "Admin")
                        .WithOne("User")
                        .HasForeignKey("PetHome.Accounts.Domain.Aggregates.User", "AdminUserId")
                        .HasConstraintName("fk_users_admin_accounts_admin_user_id");

                    b.HasOne("PetHome.Accounts.Domain.Accounts.ParticipantAccount", "Participant")
                        .WithOne("User")
                        .HasForeignKey("PetHome.Accounts.Domain.Aggregates.User", "ParticipantUserId")
                        .HasConstraintName("fk_users_participant_accounts_participant_user_id");

                    b.HasOne("PetHome.Accounts.Domain.Aggregates.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId1")
                        .HasConstraintName("fk_users_roles_role_id1");

                    b.HasOne("PetHome.Accounts.Domain.Accounts.VolunteerAccount", "Volunteer")
                        .WithOne("User")
                        .HasForeignKey("PetHome.Accounts.Domain.Aggregates.User", "VolunteerUserId")
                        .HasConstraintName("fk_users_volunteer_account_volunteer_user_id");

                    b.Navigation("Admin");

                    b.Navigation("Participant");

                    b.Navigation("Role");

                    b.Navigation("Volunteer");
                });

            modelBuilder.Entity("PetHome.Discussions.Domain.Discussion", b =>
                {
                    b.HasOne("PetHome.Discussions.Domain.Relation", "Relation")
                        .WithMany("Discussions")
                        .HasForeignKey("RelationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_discussions_relations_relation_id");

                    b.Navigation("Relation");
                });

            modelBuilder.Entity("PetHome.Discussions.Domain.Message", b =>
                {
                    b.HasOne("PetHome.Discussions.Domain.Discussion", "Discussion")
                        .WithMany("Messages")
                        .HasForeignKey("DiscussionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_messages_discussions_discussion_id");

                    b.HasOne("PetHome.Accounts.Domain.Aggregates.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_messages_user_user_id1");

                    b.Navigation("Discussion");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PetHome.Accounts.Domain.Accounts.AdminAccount", b =>
                {
                    b.Navigation("User")
                        .IsRequired();
                });

            modelBuilder.Entity("PetHome.Accounts.Domain.Accounts.ParticipantAccount", b =>
                {
                    b.Navigation("User")
                        .IsRequired();
                });

            modelBuilder.Entity("PetHome.Accounts.Domain.Accounts.VolunteerAccount", b =>
                {
                    b.Navigation("User")
                        .IsRequired();
                });

            modelBuilder.Entity("PetHome.Discussions.Domain.Discussion", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("PetHome.Discussions.Domain.Relation", b =>
                {
                    b.Navigation("Discussions");
                });
#pragma warning restore 612, 618
        }
    }
}
